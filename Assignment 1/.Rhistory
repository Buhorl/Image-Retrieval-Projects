read.csv("./corpus.csv")
corpus <- read.csv("./corpus.csv")
View(corpus)
library(dplyr)
select(corpus, seer_stage)
if(select(corpus, seer_stage) == (4 || 5 || 7)){
"later_stage"
} else {
if(select(corpus, seer_stage) == (8 || 9)){
"non-applicable and unstaged"
} else {
"early_stage"
}
}
corpus %>%
mutate(seer_stage_2 = if(select(corpus, seer_stage) == (4 || 5 || 7)){
"later_stage"
} else {
if(select(corpus, seer_stage) == (8 || 9)){
"non-applicable and unstaged"
} else {
"early_stage"
}
}
)
View(corpus)
corpus %>%
mutate(seer_stage_2 = if(corpus$seer_stage == (4 || 5 || 7)){
"later_stage"
} else {
if(corpus$seer_stage == (8 || 9)){
"non-applicable and unstaged"
} else {
"early_stage"
}
}
)
filter(corpus, seer_stage == (4 || 5 || 7))
var <- filter(corpus, seer_stage == (4 || 5 || 7))
head(var)
select(corpus, seer_stage == (4 || 5 || 7))
select(corpus, seer_stage
)
corpus$seer_stage
corpus$seer_stage == 4
corpus$seer_stage == (4 || 5 || 7)
selected_nan <- corpus$seer_stage == (9 || 8)
selected_late <- corpus$seer_stage == (4 || 5 || 7)
selected_early <- corpus$seer_stage == (1 || 2 || 3 || 6)
corpus %>%
mutate(seer_stage_2 =
if(selected_late){
"later_stage"
} else {
if(selected_nan){
"non-applicable and unstaged"
} else {
"early_stage"
}
}
)
corpus %>%
mutate(seer_stage_2 =
if(seer_stage == (4 || 5 || 7)){
"later_stage"
} else {
if(seer_stage == (8 || 9)){
"non-applicable and unstaged"
} else {
"early_stage"
}
}
)
corpus %>%
mutate(seer_stage_2 =
case_when(seer_stage == (4 || 5 || 7) ~ "later_stage",
seer_stage == (8 || 9) ~ "na",
seer_stage == (1 || 2 || 3 || 6) ~ "early stage"))
corpus %>%
mutate(seer_stage_2 = ifelse(
seer_stage == selected_late, "later_stage",
ifelse(seer_stage == selected_nan, "nan", "early_stage")
))
corpus %>%
mutate(seer_stage_2 = ifelse(
seer_stage == selected_late, "later_stage",
ifelse(seer_stage == selected_nan, "nan", "early_stage") #I guess filtering out the 8 and 9 means creating another category
)) %>%
corpus
corpus %>%
mutate(seer_stage_2 = ifelse(
seer_stage == selected_late, "later_stage",
ifelse(seer_stage == selected_nan, "nan", "early_stage") #I guess filtering out the 8 and 9 means creating another category
))
corpus <- corpus %>%
mutate(seer_stage_2 = ifelse(
seer_stage == selected_late, "later_stage",
ifelse(seer_stage == selected_nan, "nan", "early_stage") #I guess filtering out the 8 and 9 means creating another category
))
View(corpus)
selected_nan <- corpus$seer_stage == (9 || 8)
selected_late <- corpus$seer_stage == (4 || 5 || 7)
selected_early <- corpus$seer_stage == (1 || 2 || 3 || 6)
corpus <- corpus %>%
mutate(seer_stage_2 = ifelse(
seer_stage == selected_late, "later_stage",
ifelse(seer_stage == selected_nan, "nan", "early_stage") #I guess filtering out the 8 and 9 means creating another category
))
View(corpus)
view(selected_nan)
selected_nan
selected_late
selected_nan <- corpus$seer_stage == (8 || 9)
selected_nan
selected_nan == selected_late
selected_nan == selected_early
selected_nan <- (corpus$seer_stage == 8 || corpus$seer_stage == 9)
corpus$seer_stage ==
selected_nan <- corpus$seer_stage == (8 || 9)
selected_nan <- corpus$seer_stage == (8 || 9)
select(corpus, seer_stage == 4)
select(corpus, seer_stage)
selected_nan <- select(corpus, seer_stage) == (8 || 9)
selected_late <- select(corpus, seer_stage) == (4 || 5 || 7)
select(corpus, seer_stage) %>% filter(seer_stage == 4)
corpus %>% filter(seer_stage == 4) %>% select(seer_stage)
filter(corpus, seer_stage %in% c(4, 6, 7))
corpus <- read.csv("./corpus.csv")
selected_nan <- select(corpus, seer_stage) == (8 || 9)
selected_late <- select(corpus, seer_stage) == (4 || 5 || 7)
selected_early <- corpus$seer_stage == (1 || 2 || 3 || 6)
selected_nan <- ifelse(corpus$seer_stage == (4 || 5 || 7))
selected_late <- ifelse(corpus$seer_stage == (8 || 9))
selected_nan <- ifelse(corpus$seer_stage == (4 || 5 || 7), T, F)
selected_late <- ifelse(corpus$seer_stage == (8 || 9), T, F)
corpus$seer_stage
selected_nan <- ifelse(corpus$seer_stage == (4 | 5 | 7), T, F)
selected_late <- ifelse(corpus$seer_stage == (8 | 9), T, F)
selected_early <- ifelse(corpus$seer_stage == (1 | 2 | 3 | 6), T, F)
selected_nan <- select(corpus, seer_stage) == (8 | 9)
selected_late <- select(corpus, seer_stage) == (4 | 5 | 7)
selected_early <- corpus$seer_stage == (1 | 2 | 3 | 6)
tst <- c(1:10)
ttst <- ifelse(tst == (2 | 4), T, F)
ttst <- ifelse(tst == (3 | 8), T, F)
ttst <- ifelse(tst == (3 | 8), T, F)
ttst2 <- tst == (3 | 8)
select(tst)
ttst
tst
tst == 2
tst == 1
tst == 1 & tst == 2
tst == 1 | tst == 2
tst == 1 | 2
tst == (1 | 2)
tst == (3 | 2)
selected_nan <- ifelse(corpus$seer_stage == 4 | corpus$seer_stage == 5 | corpus$seer_stage == 7, T, F)
selected_late <- ifelse(corpus$seer_stage == 8 | corpus$seer_stage == 9, T, F)
corpus <- corpus %>%
mutate(seer_stage_2 = ifelse(
seer_stage == selected_late, "later_stage",
ifelse(seer_stage == selected_nan, "nan", "early_stage") #I guess filtering out the 8 and 9 means creating another category
))
View(corpus)
selected_early <- ifelse(corpus$seer_stage == 1 | corpus$seer_stage == 2 | corpus$seer_stage == 3 | corpus$seer_stage == 6), T, F)
selected_early <- ifelse(corpus$seer_stage == 1 | corpus$seer_stage == 2 | corpus$seer_stage == 3 | corpus$seer_stage == 6, T, F)
corpus <- corpus %>%
mutate(seer_stage_2 = ifelse(
selected_late, "later_stage",
ifelse(selected_nan, "nan", "early_stage") #I guess filtering out the 8 and 9 means creating another category
))
selected_nan <- ifelse(corpus$seer_stage == 8 | corpus$seer_stage == 9, T, F)
selected_late <- ifelse(corpus$seer_stage == 4 | corpus$seer_stage == 5 | corpus$seer_stage == 7, T, F)
selected_early <- ifelse(corpus$seer_stage == 1 | corpus$seer_stage == 2 | corpus$seer_stage == 3 | corpus$seer_stage == 6, T, F)
corpus <- corpus %>%
mutate(seer_stage_2 = ifelse(
selected_late, "later_stage",
ifelse(selected_nan, "nan", "early_stage") #I guess filtering out the 8 and 9 means creating another category
))
selected_nan <- ifelse(corpus$seer_stage == 8 | corpus$seer_stage == 9, T, F)
selected_late <- ifelse(corpus$seer_stage == 4 | corpus$seer_stage == 5 | corpus$seer_stage == 7, T, F)
selected_early <- ifelse(corpus$seer_stage == 1 | corpus$seer_stage == 2 | corpus$seer_stage == 3 | corpus$seer_stage == 6, T, F)
corpus <- corpus %>%
mutate(seer_stage_2 = ifelse(
selected_late, "later_stage",
ifelse(selected_nan, "nan", "early_stage") #I guess filtering out the 8 and 9 means creating another category
))
library(wordcloud2)
install.packages("wordcloud2")
install.packages("cld3")
install.packages("cld3")
frequent_words
#Task 2:
#We build a function
get_frequent_words <- function(dataset) {
## Read corpus
docs <- Corpus(VectorSource(unlist(dataset$MEDICATION_SUMMARY)))
## Preprocess corpus
# Convert the text to lower case
docs <- tm_map(docs, content_transformer(tolower))
# Remove numbers
docs <- tm_map(docs, removeNumbers)
# Remove english common stopwords
docs <- tm_map(docs, removeWords, stopwords("english"))
# Remove punctuations
docs <- tm_map(docs, removePunctuation)
# Eliminate extra white spaces
docs <- tm_map(docs, stripWhitespace)
## Build term document matrix
docs_term_matrix <- as.matrix(TermDocumentMatrix(docs))
sorted_docs_term_matrix <- sort(rowSums(docs_term_matrix), decreasing=TRUE)
frequent_words <- data.frame(word = names(sorted_docs_term_matrix), freq=sorted_docs_term_matrix)
frequent_words
}
corpus_early <- filter(corpus, seer_stage_2 == "early_stage")
corpus_late <- filter(corpus, seer_stage_2 == "later_stage")
get_frequent_words(corpus_early)
Corpus()
library(wordcloud2)
library(cld3) # For detecting languages
library(tm) # For text mining
install.packages("cld3")
library(cld3) # For detecting languages
install.packages("cld3")
install.packages("cld2")
get_frequent_words(corpus_early)
wordcloud2(get_frequent_words(corpus_early))
wordcloud2(get_frequent_words(corpus_late))
wordcloud2(get_frequent_words(corpus))
wordcloud2(get_frequent_words(corpus), min.freq = 3, max.words = 100,
random.order = FALSE, colors = brewer.pal(6, "Dark2"))
wordcloud2(get_frequent_words(corpus, min.freq = 3, max.words = 100,
wordcloud2(get_frequent_words(corpus), min.freq = 3, max.words = 100,
random.order = FALSE, colors = brewer.pal(6, "Dark2"))
)
wordcloud2(get_frequent_words(corpus), min.freq = 3, max.words = 100,
random.order = FALSE, colors = brewer.pal(6, "Dark2"))
install.packages("wordcloud")
wordcloud(get_frequent_words(corpus), min.freq = 3, max.words = 100,
random.order = FALSE, colors = brewer.pal(6, "Dark2"))
library(wordcloud)
wordcloud(get_frequent_words(corpus), min.freq = 3, max.words = 100,
random.order = FALSE, colors = brewer.pal(6, "Dark2"))
wordcloud(get_frequent_words(corpus), min.freq = 3, max.words = 100,
random.order = FALSE, colors = brewer.pal(6, "Dark2"))
#We set a seed for the WC
set.seed(2020)
fw_early <- get_frequent_words(corpus_early)
fw_late <- get_frequent_words(corpus_late)
fw_all <- get_frequent_words(corpus)
wordcloud(fw_all$word, fw_all$freq, min.freq = 3, max.words = 100,
random.order = FALSE, colors = brewer.pal(6, "Dark2"))
wordcloud(fw_all$word, fw_all$freq, min.freq = 3, max.words = 100,
random.order = FALSE, colors = brewer.pal(10, "Dark2"))
wordcloud(fw_all$word, fw_all$freq, min.freq = 3, max.words = 100,
random.order = FALSE, colors = brewer.pal(10, "Dark2"))
wordcloud(fw_all$word, fw_all$freq, min.freq = 3, max.words = 100,
random.order = FALSE, colors = brewer.pal(3, "Dark2"))
wordcloud2(get_frequent_words(corpus_late))
wordcloud(fw_all$word, fw_all$freq, min.freq = 3, max.words = 100,
random.order = FALSE, colors = brewer.pal(3, "Dark2"))
wordcloud(fw_all$word, fw_all$freq, min.freq = 3, max.words = 100,
random.order = FALSE, colors = brewer.pal(8, "Dark2"))
wordcloud2(get_frequent_words(corpus_late))
wordcloud2(get_frequent_words(corpus_late))
source('~/Desktop/Projects/Info Retrieval/Ass1/script.R')
library(wordcloud)
library(wordcloud)
library(wordcloud2)
library(cld2) # For detecting languages
library(tm) # For text mining
library(RColorBrewer)
#We set a seed for the WC
set.seed(2020)
#We load the file
corpus <- read.csv("./corpus.csv")
#Task 1: Creating a new column.
selected_nan <- ifelse(corpus$seer_stage == 8 | corpus$seer_stage == 9, T, F)
selected_late <- ifelse(corpus$seer_stage == 4 | corpus$seer_stage == 5 | corpus$seer_stage == 7, T, F)
selected_early <- ifelse(corpus$seer_stage == 1 | corpus$seer_stage == 2 | corpus$seer_stage == 3 | corpus$seer_stage == 6, T, F)
corpus <- corpus %>%
mutate(seer_stage_2 = ifelse(
selected_late, "later_stage",
ifelse(selected_nan, "nan", "early_stage")
)) #I guess filtering out the 8 and 9 means creating another category
#Task 2:
#We build a function
get_frequent_words <- function(dataset) {
## Read corpus
docs <- Corpus(VectorSource(unlist(dataset$MEDICATION_SUMMARY)))
## Preprocess corpus
# Convert the text to lower case
docs <- tm_map(docs, content_transformer(tolower))
# Remove numbers
docs <- tm_map(docs, removeNumbers)
# Remove english common stopwords
docs <- tm_map(docs, removeWords, stopwords("english"))
# Remove punctuations
docs <- tm_map(docs, removePunctuation)
# Eliminate extra white spaces
docs <- tm_map(docs, stripWhitespace)
## Build term document matrix
docs_term_matrix <- as.matrix(TermDocumentMatrix(docs))
sorted_docs_term_matrix <- sort(rowSums(docs_term_matrix), decreasing=TRUE)
frequent_words <- data.frame(word = names(sorted_docs_term_matrix), freq=sorted_docs_term_matrix)
frequent_words
}
fw_early <- get_frequent_words(filter(corpus, seer_stage_2 == "early_stage"))
fw_late <- get_frequent_words(filter(corpus, seer_stage_2 == "later_stage"))
fw_all <- get_frequent_words(corpus)
wordcloud2(get_frequent_words(corpus_early))
wordcloud2(fw_early)
wordcloud2(fw_late)
wordcloud(fw_all$word, fw_all$freq, min.freq = 3, max.words = 100,
random.order = FALSE, colors = brewer.pal(8, "Dark2"))
warnings()
wordcloud(fw_all$word, fw_all$freq, min.freq = 3, max.words = 100,
random.order = FALSE, colors = brewer.pal(8, "Dark2"), scale=c(4,.5))
wordcloud(fw_all$word, fw_all$freq, min.freq = 3, max.words = 100,
random.order = FALSE, colors = brewer.pal(8, "Dark2"), scale=c(2,.5))
wordcloud(fw_all$word, fw_all$freq, min.freq = 5, max.words = 100,
random.order = FALSE, colors = brewer.pal(8, "Dark2"), scale=c(2,.5))
View(fw_all)
View(fw_all)
wordcloud2(fw_early)
wordcloud2(fw_late)
wordcloud2(fw_all)
wordcloud(fw_early$word, fw_early$freq, min.freq = 5, max.words = 100,
random.order = FALSE, colors = brewer.pal(8, "Dark2"), scale=c(2,.5))
wordcloud(fw_late$word, fw_late$freq, min.freq = 5, max.words = 100,
random.order = FALSE, colors = brewer.pal(8, "Dark2"), scale=c(2,.5))
wordcloud(fw_all$word, fw_all$freq, min.freq = 5, max.words = 100,
random.order = FALSE, colors = brewer.pal(8, "Dark2"), scale=c(2,.5))
#We create the wc using wordcloud2
wordcloud2(fw_early,minRotation = -pi/4, maxRotation = pi/4)
#We create the wc using wordcloud2
wordcloud2(fw_early,minRotation = 0, maxRotation = 0)
#We create the wc using wordcloud2
wordcloud2(fw_early,minRotation = 0, maxRotation = 0,fontFamily ='Segoe UI')
#We create the wc using wordcloud2
wordcloud2(fw_early,minRotation = 0, maxRotation = 0,fontFamily ='Arial')
#We create the wc using wordcloud2
wordcloud2(fw_early,minRotation = 0, maxRotation = 0, color ='random-dark', fontFamily ='Arial')
#We create the wc using wordcloud2
wordcloud2(fw_early,minRotation = 0, maxRotation = 0, color ='random-dark', fontFamily ='Arial', shape ='circle')
#We create the wc using wordcloud2
wordcloud2(fw_early,minRotation = 0, maxRotation = 0, color ='random-dark', fontFamily ='Arial', ellipticity = 0.65, shape ='circle')
#We create the wc using wordcloud2
wordcloud2(fw_early,minRotation = 0, maxRotation = 0, color ='random-dark', fontFamily ='Arial', ellipticity = 1, shape ='circle')
#We create the wc using wordcloud2
wordcloud2(fw_early,minRotation = 0, maxRotation = 0, color ='random-dark', fontFamily ='Arial', ellipticity = 0, shape ='circle')
#We create the wc using wordcloud2
wordcloud2(fw_early,minRotation = 0, maxRotation = 0, color ='random-dark', fontFamily ='Arial', ellipticity = 3, shape ='circle')
#We create the wc using wordcloud2
wordcloud2(fw_early,minRotation = 0, maxRotation = 0, color ='random-dark', size = 1, fontFamily ='Arial', ellipticity = 3, shape ='circle')
#We create the wc using wordcloud2
wordcloud2(fw_early,minRotation = 0, maxRotation = 0, color ='random-dark', size = 0.7, fontFamily ='Arial', ellipticity = 3, shape ='circle')
#We create the wc using wordcloud2
wordcloud2(fw_early,minRotation = 0, maxRotation = 0, color ='random-dark', size = 0.7, fontFamily ='Arial', ellipticity = 2, shape ='circle')
#We create the wc using wordcloud2
wordcloud2(fw_early,minRotation = 0, maxRotation = 0, color ='random-dark', size = 0.7, fontFamily ='Arial', ellipticity = 1, shape ='circle')
wordcloud2(fw_all,
minRotation = 0, maxRotation = 0, color ='random-dark', size = 0.7, fontFamily ='Arial', ellipticity = 1, shape ='circle')
library(dplyr)
library(wordcloud)
library(wordcloud2)
library(cld2) # For detecting languages
library(tm) # For text mining
library(RColorBrewer)
#We set a seed for the WC
set.seed(2020)
#We load the file
corpus <- read.csv("./corpus.csv")
#Task 1: Creating a new column.
selected_nan <- ifelse(corpus$seer_stage == 8 | corpus$seer_stage == 9, T, F)
selected_late <- ifelse(corpus$seer_stage == 4 | corpus$seer_stage == 5 | corpus$seer_stage == 7, T, F)
selected_early <- ifelse(corpus$seer_stage == 1 | corpus$seer_stage == 2 | corpus$seer_stage == 3 | corpus$seer_stage == 6, T, F)
corpus <- corpus %>%
mutate(seer_stage_2 = ifelse(
selected_late, "later_stage",
ifelse(selected_nan, "nan", "early_stage")
)) #I guess filtering out the 8 and 9 means creating another category
#Task 2:
#We build a function
get_frequent_words <- function(dataset) {
## Read corpus
docs <- Corpus(VectorSource(unlist(dataset$MEDICATION_SUMMARY)))
## Preprocess corpus
# Convert the text to lower case
docs <- tm_map(docs, content_transformer(tolower))
# Remove numbers
docs <- tm_map(docs, removeNumbers)
# Remove english common stopwords
docs <- tm_map(docs, removeWords, stopwords("english"))
# Remove punctuations
docs <- tm_map(docs, removePunctuation)
# Eliminate extra white spaces
docs <- tm_map(docs, stripWhitespace)
## Build term document matrix
docs_term_matrix <- as.matrix(TermDocumentMatrix(docs))
sorted_docs_term_matrix <- sort(rowSums(docs_term_matrix), decreasing=TRUE)
frequent_words <- data.frame(word = names(sorted_docs_term_matrix), freq=sorted_docs_term_matrix)
frequent_words
}
fw_early <- get_frequent_words(filter(corpus, seer_stage_2 == "early_stage"))
fw_late <- get_frequent_words(filter(corpus, seer_stage_2 == "later_stage"))
fw_all <- get_frequent_words(corpus)
#We create the wc using wordcloud
wordcloud(fw_early$word, fw_early$freq, min.freq = 5, max.words = 100,
random.order = FALSE, colors = brewer.pal(8, "Dark2"), scale=c(2,.5))
wordcloud(fw_late$word, fw_late$freq, min.freq = 5, max.words = 100,
random.order = FALSE, colors = brewer.pal(8, "Dark2"), scale=c(2,.5))
wordcloud(fw_all$word, fw_all$freq, min.freq = 5, max.words = 100,
random.order = FALSE, colors = brewer.pal(8, "Dark2"), scale=c(2,.5))
#We create the wc using wordcloud2
wordcloud2(fw_early,
minRotation = 0, maxRotation = 0, color ='random-dark', size = 0.7, fontFamily ='Arial', ellipticity = 1, shape ='circle')
#We create the wc using wordcloud2
wordcloud2(fw_early,
minRotation = 0, maxRotation = 0, color ='random-dark', size = 0.7, fontFamily ='Arial', ellipticity = 1, shape ='circle')
#We create the wc using wordcloud2
wordcloud2(fw_early,
minRotation = 0, maxRotation = 0, color ='random-dark', size = 0.7, fontFamily ='Arial', ellipticity = 1, shape ='circle')
library(dplyr)
source('~/Desktop/Projects/Info Retrieval/Ass1/script.R', echo=TRUE)
#We create the wc using wordcloud2
wordcloud2(fw_early,
minRotation = 0, maxRotation = 0, color ='random-dark', size = 0.7, fontFamily ='Arial', ellipticity = 1, shape ='circle')
wordcloud2(fw_late,
minRotation = 0, maxRotation = 0, color ='random-dark', size = 0.7, fontFamily ='Arial', ellipticity = 1, shape ='circle')
wordcloud2(fw_all,
minRotation = 0, maxRotation = 0, color ='random-dark', size = 0.7, fontFamily ='Arial', ellipticity = 1, shape ='circle')
